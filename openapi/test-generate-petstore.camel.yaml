- rest:
    delete:
      - id: deletePet
        param:
          - dataType: string
            name: api_key
            required: false
            type: header
          - description: Pet id to delete
            dataType: integer
            name: petId
            required: true
            type: path
        path: /pet/{petId}
        to: direct:deletePet
      - id: deleteOrder
        description: For valid response try integer IDs with value < 1000. Anything
          above 1000 or nonintegers will generate API errors
        param:
          - description: ID of the order that needs to be deleted
            dataType: integer
            name: orderId
            required: true
            type: path
        path: /store/order/{orderId}
        to: direct:deleteOrder
      - id: deleteUser
        description: This can only be done by the logged in user.
        param:
          - description: The name that needs to be deleted
            dataType: string
            name: username
            required: true
            type: path
        path: /user/{username}
        to: direct:deleteUser
    get:
      - id: findPetsByStatus
        description: Multiple status values can be provided with comma separated strings
        param:
          - description: Status values that need to be considered for filter
            allowableValues:
              - available
              - pending
              - sold
            dataType: string
            defaultValue: available
            name: status
            required: false
            type: query
        path: /pet/findByStatus
        produces: application/xml,application/json
        to: direct:findPetsByStatus
      - id: findPetsByTags
        description: Multiple tags can be provided with comma separated strings. Use
          tag1, tag2, tag3 for testing.
        param:
          - description: Tags to filter by
            arrayType: string
            dataType: array
            name: tags
            required: false
            type: query
        path: /pet/findByTags
        produces: application/xml,application/json
        to: direct:findPetsByTags
      - id: getPetById
        description: Returns a single pet
        param:
          - description: ID of pet to return
            dataType: integer
            name: petId
            required: true
            type: path
        path: /pet/{petId}
        produces: application/xml,application/json
        to: direct:getPetById
      - id: getInventory
        description: Returns a map of status codes to quantities
        path: /store/inventory
        produces: application/json
        to: direct:getInventory
      - id: getOrderById
        description: For valid response try integer IDs with value <= 5 or > 10. Other
          values will generate exceptions.
        param:
          - description: ID of order that needs to be fetched
            dataType: integer
            name: orderId
            required: true
            type: path
        path: /store/order/{orderId}
        produces: application/xml,application/json
        to: direct:getOrderById
      - id: loginUser
        param:
          - description: The user name for login
            dataType: string
            name: username
            required: false
            type: query
          - description: The password for login in clear text
            dataType: string
            name: password
            required: false
            type: query
        path: /user/login
        produces: application/xml,application/json
        to: direct:loginUser
      - id: logoutUser
        path: /user/logout
        to: direct:logoutUser
      - id: getUserByName
        param:
          - description: "The name that needs to be fetched. Use user1 for testing. "
            dataType: string
            name: username
            required: true
            type: path
        path: /user/{username}
        produces: application/xml,application/json
        to: direct:getUserByName
    path: /v3
    post:
      - id: addPet
        description: Add a new pet to the store
        consumes: application/json,application/xml,application/x-www-form-urlencoded
        param:
          - description: Create a new pet in the store
            name: body
            required: true
            type: body
        path: /pet
        produces: application/xml,application/json
        to: direct:addPet
      - id: updatePetWithForm
        param:
          - description: ID of pet that needs to be updated
            dataType: integer
            name: petId
            required: true
            type: path
          - description: Name of pet that needs to be updated
            dataType: string
            name: name
            required: false
            type: query
          - description: Status of pet that needs to be updated
            dataType: string
            name: status
            required: false
            type: query
        path: /pet/{petId}
        to: direct:updatePetWithForm
      - id: uploadFile
        consumes: application/octet-stream
        param:
          - description: ID of pet to update
            dataType: integer
            name: petId
            required: true
            type: path
          - description: Additional Metadata
            dataType: string
            name: additionalMetadata
            required: false
            type: query
          - name: body
            required: true
            type: body
        path: /pet/{petId}/uploadImage
        produces: application/json
        to: direct:uploadFile
      - id: placeOrder
        description: Place a new order in the store
        consumes: application/json,application/xml,application/x-www-form-urlencoded
        param:
          - name: body
            required: true
            type: body
        path: /store/order
        produces: application/json
        to: direct:placeOrder
      - id: createUser
        description: This can only be done by the logged in user.
        consumes: application/json,application/xml,application/x-www-form-urlencoded
        param:
          - description: Created user object
            name: body
            required: true
            type: body
        path: /user
        produces: application/json,application/xml
        to: direct:createUser
      - id: createUsersWithListInput
        description: Creates list of users with given input array
        consumes: application/json
        param:
          - name: body
            required: true
            type: body
        path: /user/createWithList
        produces: application/xml,application/json
        to: direct:createUsersWithListInput
    put:
      - id: updatePet
        description: Update an existing pet by Id
        consumes: application/json,application/xml,application/x-www-form-urlencoded
        param:
          - description: Update an existent pet in the store
            name: body
            required: true
            type: body
        path: /pet
        produces: application/xml,application/json
        to: direct:updatePet
      - id: updateUser
        description: This can only be done by the logged in user.
        consumes: application/json,application/xml,application/x-www-form-urlencoded
        param:
          - description: name that needs to be updated
            dataType: string
            name: username
            required: true
            type: path
          - description: Update an existent user in the store
            name: body
            required: true
            type: body
        path: /user/{username}
        to: direct:updateUser
- route:
    id: route-4420
    from:
      uri: direct
      parameters:
        name: logoutUser
- route:
    id: route-2158
    from:
      uri: direct:updatePetWithForm
- route:
    id: route-2852
    from:
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      uri: direct:deleteOrder
- route:
    id: route-1313
    from:
      description: Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      uri: direct:findPetsByTags
- route:
    id: route-4203
    from:
      description: This can only be done by the logged in user.
      uri: direct:createUser
- route:
    id: route-3722
    from:
      uri: direct:deletePet
- route:
    id: route-2947
    from:
      description: This can only be done by the logged in user.
      uri: direct:deleteUser
- route:
    id: route-2574
    from:
      description: Returns a map of status codes to quantities
      uri: direct:getInventory
- route:
    id: route-3962
    from:
      description: Creates list of users with given input array
      uri: direct:createUsersWithListInput
- route:
    id: route-1564
    from:
      description: Returns a single pet
      uri: direct:getPetById
- route:
    id: route-3357
    from:
      uri: direct:loginUser
- route:
    id: route-1408
    from:
      uri: direct:uploadFile
- route:
    id: route-1037
    from:
      description: Update an existing pet by Id
      uri: direct:updatePet
- route:
    id: route-1785
    from:
      description: Add a new pet to the store
      uri: direct:addPet
- route:
    id: route-2003
    from:
      uri: direct:getUserByName
- route:
    id: route-3637
    from:
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      uri: direct:getOrderById
- route:
    id: route-1772
    from:
      description: This can only be done by the logged in user.
      uri: direct:updateUser
- route:
    id: route-3842
    from:
      description: Place a new order in the store
      uri: direct:placeOrder
- route:
    id: route-1003
    from:
      description: Multiple status values can be provided with comma separated strings
      uri: direct:findPetsByStatus
